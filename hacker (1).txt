J1:Largest among 3


import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
      Scanner sc= new Scanner(System.in);
        int a=sc.nextInt();
        int b=sc.nextInt();
        int c=sc.nextInt();
        if(a>b&&a>c)
            System.out.println(a);
        else{
            if(b>a&&b>c)
            System.out.println(b);
        else    
            System.out.println(c);
        }
        }
}
.........................................................................
J2:Sum of all numbers divisible by 3
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
    Scanner sc=new Scanner(System.in);
            int n= sc.nextInt();
                int sum=0;
        for(int i=0;i<n*2;i=i+2){
            if(i%3==0)
                sum=sum+i;
        }
        System.out.println(sum);
    }
}
.......................................................
J3:Armstrong number
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
   Scanner sc = new Scanner(System.in);
        int n=sc.nextInt();
        int temp=n;
        int r=0;
        int sum=0;
        while(temp != 0){
           r= temp%10;
           sum+=Math.pow(r,3);
            temp=temp/10;
        }
        if(n==sum)
            System.out.println("1");
         else   
             System.out.println("0");
    }
}
...............................................................
J4: Highest and Average Marks
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
   Scanner sc=new Scanner(System.in);
       int n = sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        double sum=0.0;
        int max=arr[0];
            for (int i=0;i<arr.length;i++){
             sum+=arr[i];
                if(max<=arr[i])
                    max=arr[i];
            }
        sum=sum/n;
        System.out.println(max);
        System.out.println(sum);

    }
}
..................................................................................
J5:Call Method

import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
    student obj=new student();
      obj.print();
    }
}
class student{
    void print(){
        System.out.println("Hi! I am class STUDENT.");
    }
    
}
..................................................................................
J6:Call and Display method
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
    
        Student obj1=new Student();
        School obj2=new School();
        obj1.print();
        obj2.print();
    }
}
 class Student{
    void print(){
        System.out.println("Hi! I am class STUDENT.");
     }
              }
 class School{
    void print(){
          System.out.println("Hi! I am class SCHOOL.");
    }
 }
..................................................................................
J7:Call and Create method
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
    studentMethod();
    }
    static void studentMethod(){
        Question obj=new Question();
        obj.print();
    }
}
class Question{
   void print(){
        System.out.println("Well Done!");
    }
}
.....................................................................
J8:Constructor
import java.io.*;
import java.util.*;

public class Solution {
    Solution(){
        System.out.println("You got nothing.");
    }
    Solution(int l){
        System.out.println("You got 10 for an MCQ");
    }

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
    Solution obj1=new Solution();
     Solution obj2=new Solution(1);    
     
    }
}
.....................................................................
J9:Variable printing
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
    Scanner sc=new Scanner(System.in);
        String str= new String();
     //   str= sc.nextLine();
    //  System.out.println(str);
        System.out.println("OOPS WITH JAVA");
    }
}
.....................................................................

J10:Fibonacci Number
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
   Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        arr[0]=0;
       if(n>1){
        arr[1]=1;
        for (int i=2;i<n;i++){
            arr[i]=arr[i-1] + arr[i-2];
         //System.out.print(arr[i]+" ");       
        }}
        System.out.print(arr[n-1]);
    }
}
...................................................
J11:Point class
import java.io.*;
import java.util.*;


public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
    
        Scanner sc = new Scanner(System.in);
        double x1 = sc.nextDouble();
        double y1 = sc.nextDouble();
        double x2 = sc.nextDouble();
        double y2 = sc.nextDouble();
        
        double x = (x2-x1)*(x2-x1);
        double y = (y2-y1)*(y2-y1);
        Point t1=new Point();
        double d=t1.distance(x,y);
System.out.println(d);
    }
}
class Point{
    double x=0.0;
     double y=0.0;
    
    double distance(double pointP1,double pointP2){
      this.x=pointP1;
      this.y=pointP2;
    double distance = Math.sqrt((x + y));
    return distance;
    }
}
...........................................................................
Simple Array Sum
import java.util.*;
class Solution{
        public static void main(String [] args){
            Scanner sc=new Scanner(System.in);
            int length=sc.nextInt();
            int[] arr=new int[length];
            for (int i=0;i<length;i++){
                arr[i]=sc.nextInt();
            }
            int sum=0;
            for (int i=0;i<length;i++){
                sum+=arr[i];
            }
            System.out.println(sum);
        }
}
.........................................................................................
Java Strings Introduction
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        
        Scanner sc=new Scanner(System.in);
        String A=sc.next();
        String B=sc.next();
        /* Enter your code here. Print output to STDOUT. */
     
        System.out.println(A.length()+B.length());
        
        if(A.charAt(0) > B.charAt(0))
            System.out.println("Yes");
        else
            System.out.println("No");
        
        char a[]= new char[A.length()];
        char b[]= new char[B.length()];
        for (int i=0; i<a.length ;i++){        // coverting to arr
            a[i]=A.charAt(i); 
        }
         for (int i=0; i<b.length; i++){        // coverting to arr
            b[i]=B.charAt(i); 
        }
        a[0]=(char)((int)(a[0])-32);
        b[0]=(char)((int)(b[0])-32);            //upper case
        
        for (int i=0; i<a.length; i++){        // display
            System.out.print(a[i]+"");
        } System.out.print(" ");
        
        for (int i=0; i<b.length; i++){        // display
            System.out.print(b[i]+"");
        } 
    }
}
.......................................................................
Java String Tokens
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String s = scan.nextLine();
        // Write your code here.

             s = s.trim();
        if (s.length() == 0) {
            System.out.println(0);
        } else {
            String[] strings = s.split("['!?,._@ ]+");
            System.out.println(strings.length);
            for (String str : strings)
                System.out.println(str);
        }
    }
}
....................................................................
Java String Reverse
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        
        Scanner sc=new Scanner(System.in);
        String A=sc.next();
        /* Enter your code here. Print output to STDOUT. */
        
        char a[]= new char[A.length()];
        for (int i=0; i<A.length(); i++){        // coverting to arr
            a[i]=A.charAt(i);
        }
        char b[]=new char[a.length];
        for (int i=0, j=a.length-1; i<a.length; j--,i++){           //reverse arr
            b[i]=a[j]; 
        }  
        
        
        if (Arrays.equals(a, b))  
            System.out.println("Yes");
        else
            System.out.println("No");
    }
}



//undefine
.....................................................................
Java Substring
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String S = in.next();
        int start = in.nextInt();
        int end = in.nextInt();
        
        char arr[]= new char[S.length()];
        for (int i=0; i<S.length(); i++){        // coverting to arr
            arr[i]=S.charAt(i);    
        }
        for (int i=start; i<end; i++){        // display
            System.out.print(arr[i]);    
        }
        
    }
}
.................................................................................
Java Substring Comparisons
public static String getSmallestAndLargest(String s, int k) {
        String smallest = "";
        String largest = "";
        
        // Complete the function
        // 'smallest' must be the lexicographically smallest substring of length 'k'
        // 'largest' must be the lexicographically largest substring of length 'k'
        
        int l=s.length();
        String arr[]=new String[l-(k-1)];
        
       // System.out.println(l);
 
        for(int i=0;i<l-(k-1);i++){
            for(int j=0; j<k;j++){
            if (j==0)
                arr[i]=""+s.charAt(i+j);
            else
                arr[i]=arr[i]+s.charAt(i+j);  
            
            }
   //         arr[i]=""+s.charAt(i)+s.charAt(i+1)+s.charAt(i+2);
        }
       
         java.util.Arrays.sort(arr);
       
        smallest = arr[0];
        largest = arr[arr.length-1];
        
        return smallest + "\n" + largest;
    }
.........................................................................
Java Anagrams
  static boolean isAnagram(String a, String b) {
        // Complete the function
if(a.length()==b.length()){
      
      char A[]= new char[a.length()];
        for (int i=0; i<a.length(); i++){        // coverting to arr
            A[i]=a.charAt(i);
            if(A[i]>='A' && A[i]<='Z')            //lower case
                A[i]=(char)((int)(A[i])+32);
        }        
                
      
        char temp='a';                        //sort arr  
        for (int i=0;i<A.length;i++){
            for (int j=i+1;j<A.length;j++){
                if(A[i]>=A[j]){
                        temp=A[i];
                        A[i] = A[j];
                        A[j] = temp;
                }        
            }
        }
              
        
        char B[]= new char[b.length()];
        for (int i=0; i<b.length(); i++){        // coverting to arr
            B[i]=b.charAt(i);    
         if(B[i]>='A' && B[i]<='Z')             //lower case
            B[i]=(char)((int)(B[i])+32);
         }
      
      
      
         temp='b';                        //sort arr  
        for (int i=0;i<B.length;i++){
            for (int j=i+1;j<B.length;j++){
                if(B[i]>=B[j]){
                        temp=B[i];
                        B[i] = B[j];
                        B[j] = temp;
                }        
            }
        }
      int count=0;
      for(int i=0; i<A.length; i++){
          if(A[i]==B[i])
              count++;
      }
      
      if (count==A.length)
                return true;
        else
                 return false;
}
  else 
      return false;    
    }
.......................................................................
OOPJ1 :Girlfriend's demands
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        
        //while{}
        Scanner sc=new Scanner(System.in);
        int x=sc.nextInt();
        int[] d=new int[x];
        int[] c=new int[x];
        for (int i=0;i<x;i++){
            d[i]=sc.nextInt();
            c[i]=sc.nextInt();
        }
        for(int i=0;i<x;i++){
            if((c[i])%(d[i])==0)
                System.out.println("Yes");
            else
                System.out.println("No");
        }
        
    }
}
.............................................................................
.........................................................................................
=============================================================================================================

DATA STRUCTURE:

Assignment 1)
1) Sum of the series
Recursive program to find the Sum of the series 1 – 1/2 + 1/3 – 1/4 … 1/N Given a positive integer N, the task is to find the sum of the series 1 – (1/2) + (1/3) – (1/4) +…. (1/N) using recursion.
import java.io.*;
import java.util.*;

public class Solution {
    public static float sum_of_series(int i, int n, float s)
    {
        if(i>n)
            return s;
        else
        {
            if(i%2==0)
                s-=(float)1/i;
            else
                s+=(float)1/i;
            return sum_of_series(i+1,n,s);
        }
    }

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
       Scanner scan=new Scanner(System.in);
        int n=scan.nextInt();
 
        float res=sum_of_series(1,n,0);
       System.out.println(String.format("%.16f",res));
       
    }
}
3)Tower-of-Hanoi Problem
import java.io.*;
import java.util.*;

public class Solution {
    static void towerOfHanoi(int n, char from_rod,
                    char to_rod, char aux_rod)
{
    if (n == 1)
    {
        System.out.println("Disk 1 moved from "+
                           from_rod+" to "+to_rod);
        return;
    }
    towerOfHanoi(n - 1, from_rod, aux_rod, to_rod);
    System.out.println("Disk "+ n + " moved from " +
                       from_rod +" to " + to_rod );
    towerOfHanoi(n - 1, aux_rod, to_rod, from_rod);
}

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
    Scanner sc=new Scanner(System.in);
    int n =sc.nextInt(); // Number of disks
    towerOfHanoi(n, 'A', 'C', 'B');
    }
}
2)Negative Number
Sample Input 0
-12, 11, -13, -5, 6, -7, 5, -3, -6
Sample Output 0
-12 -13 -5 -7 -3 -6 11 6 5

import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
         int arr[] = { -12, 11, -13, -5, 6, -7, 5, -3, -6};
         
        for (int i=0; i<arr.length; i++)
        {
            
            if(arr[i]>0)
            {
            for (int j=i; j<arr.length; j++)
            {
                if(arr[i]>0 && arr[j]<0)
                {
                    int a=arr[i];
                    arr[i]=arr[j];
                    arr[j]=a;
                }
            }
            }     
        }
        
         for (int i=0; i<arr.length; i++)
                {
                    for (int j=0; j<arr.length; j++)
                    {
                        if (arr[i] >0 && arr[j]>0)
                        {
                            if(arr[i]>arr[j])
                            {
                                int temp=arr[i];
                                arr[i]=arr[j];
                                arr[j]=temp;
                            }
                        }
                    }
                }
        
    
           for (int i=0; i<arr.length; i++)
           {
               System.out.print(arr[i]+ " ");
           }
    
    
    }
    
         
        
}
    3)Max element(1 test case fail)
Given a matrix, the task is to find the maximum element of each row.
import java.io.*;
import java.util.*;

public class Solution {
    public static void maxelement(int no_of_rows, int[][] arr) {
        int i = 0;
         
        // Initialize max to 0 at beginning
        // of finding max element of each row
        int max = 0;
        int[] result = new int[no_of_rows];
        while (i < no_of_rows) {
            for (int j = 0; j < arr[i].length; j++) {
                if (arr[i][j] > max) {
                    max = arr[i][j];
                }
            }
            result[i] = max;
            max =0;
            i++;
 
        }
        printArray(result);
 
    }
 
    // Print array element
    private static void printArray(int[] result) {
        for (int i =0; i<result.length;i++) {
            System.out.println(result[i]);
        }
 
    }

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
    int[][] arr = new int[][] {{1, 2, 3},{1, 4, 9},{76, 34, 21}};
       // Calling the function 
        maxelement(3, arr);
    }
}

Assignment 2)
1)Pair with sum
import java.io.*;
import java.util.*;
public class Solution {
    static void chkPair(int A[], int size, int x) {
      for (int i = 0; i < (size - 1); i++) {
          for (int j = (i + 1); j < size; j++) {
              if (A[i] + A[j] == x) {
                  System.out.println("Pair Found" +
                                     "(" + A[i] + ", " + A[j] + ")");
                 System.out.println("Valid pair exists");
 }
            }
      }
 System.out.println("Pair not found ");
  }
    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
      int A[] = { 5, 2, 6, 8, 1, 9};
      int x = 12;
      int size = A.length;
        chkPair(A, size, x);
     }
}

2) Find duplicates within a range k in an array. Given an array and a positive number k, check whether the array contains any duplicate elements within the range k.If k is more than the array's size, the solution should check for duplicates in the complete array.
Input Format
A[] = { 5, 6, 8, 2, 4, 6, 9 } k = 4
Constraints
.
Output Format
Output: Duplicates found
(element 6 repeats at distance 4 which is <= k)


import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
                    Scanner sc=new Scanner(System.in);
        String s =sc.nextLine();
        int key  = sc.nextInt();
        String[] arr = s.split(", ");
        int[] arr2=new int[arr.length-1];
        for(int i=0;i<arr.length;i++)
        {
            arr2[i]=Integer.parseInt(arr[i]);
            if(arr2[i]==key)
            {
                System.out.println("Duplicates found");
                return;
            }
            
        }
        System.out.println("Duplicates not found");
        
    }
}

3) Find the smallest missing element from a sorted array Given a sorted array of distinct non-negative integers, find the smallest missing element in it.
Input Format
Input: A[] = [0, 1, 2, 6, 9, 11, 15]
Output Format
Output: The smallest missing element is 3
Sample Input 0
0, 1, 2, 6, 9, 11, 15
Sample Output 0
The smallest missing element is 3


import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
       Scanner sc =new Scanner(System.in);
        String s =sc.nextLine();
        String arr[] =s.split(", ");
        int[] arr2 =new int[arr.length];
        for(int i=0;i<arr.length;i++)
        {
            arr2[i]=Integer.parseInt(arr[i]);
        }
        for(int i=0;i<arr2.length;i++)
        {
            if(arr2[i]!=i)
            {
                System.out.println("The smallest missing element is "+i);
                   break; 
            }
        }
    }
        
}

4)Bubble Sort
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc =new Scanner(System.in);        
        
        String s =sc.nextLine();
        String arr[]=s.split(", ");
        int[] arr2=new int[arr.length];
        for(int i=0;i<arr.length;i++)
        {
             arr2[i] = Integer.parseInt(arr[i]);
        }
        
        for(int i=0;i<arr2.length;i++)
        {
            for(int j=0 ;j<arr2.length-i-1;j++)
            {
                if(arr2[j] > arr2[j+1])
                {
                int temp=arr2[j];
                    arr2[j]=arr2[j+1];
                    arr2[j+1]=temp;
                  }
            }
        }
        
            System.out.println(Arrays.toString(arr2));
          }
}

5) Reverse a doubly linked list. To reverse a doubly linked list using iteration or recursion.
import java.io.*;
import java.util.*;

public class Solution {
    static class Node
{
    int data;
    Node next, prev;
};
 
// function to get a new node
static Node getNode(int data)
{
    // allocate space
    Node new_node = new Node();
    new_node.data = data;
    new_node.next = new_node.prev = null;
    return new_node;
}
 
// function to insert a node at the beginning
// of the Doubly Linked List
static Node push(Node head_ref, Node new_node)
{
    // since we are adding at the beginning,
    // prev is always null
    new_node.prev = null;
 
    // link the old list off the new node
    new_node.next = (head_ref);
 
    // change prev of head node to new node
    if ((head_ref) != null)
        (head_ref).prev = new_node;
 
    // move the head to point to the new node
    (head_ref) = new_node;
    return head_ref;
}
 
// function to reverse a doubly linked list
static Node Reverse(Node node)
{
    // If empty list, return
    if (node == null)
        return null;
 
    // Otherwise, swap the next and prev
    Node temp = node.next;
    node.next = node.prev;
    node.prev = temp;
 
    // If the prev is now null, the list
    // has been fully reversed
    if (node.prev == null)
        return node;
 
    // Otherwise, keep going
    return Reverse(node.prev);
}
 
// Function to print nodes in a given doubly
// linked list
static void printList(Node head)
{
    while (head != null)
    {
        System.out.print(head.data +" -> ");
        head = head.next;
    }
    System.out.print("null");
}
 

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
       Node head = null;
 
    // Create doubly linked: 10<.8<.4<.2 /
    head = push(head, getNode(1));
    head = push(head, getNode(2));
    head = push(head, getNode(3));
    head = push(head, getNode(4));
    head = push(head, getNode(5));
    
 
    // Reverse doubly linked list
    head = Reverse(head);
   
    printList(head); 
         
    }
}

6)Linked List Representation in Java
import java.io.*;
import java.util.*;
class Solution
{
    Node head;
    static class Node
    {
        Node next;
        int data;
        Node(int x)
        {
            data=x;
        }
    }
    void append(int key)
    {
        Node newNode = new Node(key);
        Node n =head;
        if(head==null)
        {
            head=newNode;
            return ;
        }
        else
            while(n.next!=null)
            {
                n=n.next;
            }
           n.next =newNode;
            
    }
    void display()
    {
        Node n =head;
        while(n!=null)
        {
            System.out.print(n.data+" -> ");
            n=n.next;
        }
        System.out.print("null");
    }
    public static void main(String[] args) {
        Solution n1 =new Solution();
        n1.append(1);
        n1.append(2);
        n1.append(3);
        n1.append(4);
        n1.display();
    }
}

7) Maximum Element
You have an empty sequence, and you will be given  queries. Each query is one of these three types:
1 x  -Push the element x into the stack.
2    -Delete the element present at the top of the stack.
3    -Print the maximum element in the stack.

import java.io.*;
import java.util.*;

public class Solution {
    private static void getMaxElementFromStack()
    {
        Stack<Integer> stack = new Stack<Integer>();
        Stack<Integer> onlyMaxs = new Stack<Integer>();
        
        Scanner sc = new Scanner(System.in);
        
        int N = Integer.parseInt(sc.nextLine());
        int temp = 0;
        
        
        
        while(sc.hasNext())
        {
            String type[] = sc.nextLine().split(" ");
            switch(type[0])
            {
                case "1":
                temp = Integer.parseInt(type[1]);
                stack.push(temp);
                 if(onlyMaxs.isEmpty() || onlyMaxs.peek() <= temp)
                     onlyMaxs.push(temp);
                break;
                case "2":
                temp = stack.pop();
                if(temp == onlyMaxs.peek())
                    onlyMaxs.pop();
                break;
                case "3":
                System.out.println(onlyMaxs.peek());
            }
            N--;
        }
        
        while(N-- > 0)
            System.out.println(onlyMaxs.peek());
        
    }
    public static void main(String[] args) {
        getMaxElementFromStack();
    }
}

9)Balanced Bracket

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
     
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        //int arr[] = new int[n];
        for(int arr_i=0; arr_i < n; arr_i++){
            Stack st = new Stack();
            //arr[arr_i] = in.nextInt();
            String ipSeq = in.next();
            //System.out.println(ipSeq);
            boolean match = true;
            for(int ind=0; ind<ipSeq.length(); ind++){
                char ch = ipSeq.charAt(ind);
                if(ch=='(' || ch=='{' || ch=='['){
                    st.push(ch);
                }else if(st.isEmpty()){
                    match = false;
                    break;
                }else if(ch==')'){
                    if('('!=(char)st.pop()){
                        match = false;
                        break;
                    }
                }else if(ch=='}'){
                    if('{'!=(char)st.pop()){
                        match = false;
                        break;
                    }
                }else if(ch==']'){
                    if('['!=(char)st.pop()){
                        match = false;
                        break;
                    }
                }
            }

            if(match){
                if(!st.isEmpty()){
                    System.out.println("NO");
                }else{
                    System.out.println("YES");
                }
            }else{
                System.out.println("NO");
            }
        }
    }
}

10)Balanced Paranthesis//only one test case pass
import java.io.*;
import java.util.*;

public class Solution {
    
    static int minParentheses(String p)
    {
       
        // maintain balance of string
        int bal = 0;
        int ans = 0;
       
        for (int i = 0; i < p.length(); ++i) {
       
            bal += p.charAt(i) == '(' ? 1 : -1;
       
            // It is guaranteed bal >= -1
            if (bal == -1) {
                ans += 1;
                bal += 1;
            }
        }
       
        return bal + ans;
    }

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
    String p = "()))";
         
        // Function to print required answer
        System.out.println(minParentheses(p));
    
    }
}
































































